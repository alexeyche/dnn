package NDnnProto;

import "integrate_and_fire.proto";
import "determ.proto";
import "spike_neuron.proto";
import "basic_synapse.proto";
import "sim.proto";
import "synapse.proto";
import "stochastic.proto";
import "spike_neuron_impl.proto";
import "spike_sequence_neuron.proto";
import "reward_control.proto";
import "ident.proto";
import "gauss.proto";
import "stdp.proto";
import "sigmoid.proto";
import "min_max_norm.proto";
import "input_classifier.proto";
import "difference_of_gaussians.proto";
import "nonlinear_norm.proto";
import "soft_bounds.proto";
import "hedonistic_synapse.proto";
import "stp_synapse.proto";
import "pre_post_stdp.proto";
import "multiplicative_norm.proto";
import "sliding_ltd.proto";

message TRewardControl {
    optional TRewardControlConst RewardControl = 1;
    optional TRewardControlState RewardControlState = 2;
}

message TConfig {
	optional TSimConfiguration SimConfiguration = 1;
	repeated TLayer Layer = 2;
	repeated TConnection Connection = 3;
    optional TRewardControl RewardControl = 4;
}


message TLayer {
    repeated TIntegrateAndFireConst IntegrateAndFire = 1;
    repeated TIntegrateAndFireState IntegrateAndFireState = 2;
    repeated TDetermConst Determ = 3;
    repeated TSpikeNeuronImplInnerState SpikeNeuronImplInnerState = 4;
    repeated TSpikeNeuronConst SpikeNeuron = 5;
    repeated TSpikeNeuronInnerState SpikeNeuronInnerState = 6;
    repeated TBasicSynapseConst BasicSynapse = 7;
    repeated TBasicSynapseState BasicSynapseState = 8;
    repeated TSynapseInnerState SynapseInnerState = 9;
    repeated TSpikeSequenceNeuronConst SpikeSequenceNeuron = 10;
    repeated TSpikeSequenceNeuronState SpikeSequenceNeuronState = 11;
    repeated TIdentReceptiveFieldConst IdentReceptiveField = 12;
    repeated TGaussReceptiveFieldConst GaussReceptiveField = 13;
    repeated TStdpConst Stdp = 14;
    repeated TStdpState StdpState = 15;
    repeated TSigmoidConst Sigmoid = 16;
    repeated TMinMaxNormConst MinMaxNorm = 17;
    repeated TMinMaxNormState MinMaxNormState = 18;
    repeated TInputClassifierConst InputClassifier = 19;
    repeated TNonLinearNormConst NonLinearNorm = 20;
    repeated TNonLinearNormState NonLinearNormState = 21;
    repeated TSoftBoundsConst SoftBounds = 22;
    repeated TSoftBoundsState SoftBoundsState = 23;
    repeated TSTPSynapseConst STPSynapse = 24;
    repeated TSTPSynapseState STPSynapseState = 25;
    repeated TPrePostStdpConst PrePostStdp = 26;
    repeated TPrePostStdpState PrePostStdpState = 27;
    repeated TMultiplicativeNormConst MultiplicativeNorm = 28;
    repeated TMultiplicativeNormState MultiplicativeNormState = 29;
    repeated TSlidingLtdConst SlidingLtd = 30;
    repeated TSlidingLtdState SlidingLtdState = 31;
    repeated THedonisticSynapseConst HedonisticSynapse = 32;
    repeated THedonisticSynapseState HedonisticSynapseState = 33;
}


message TConnection {
	optional uint32 From = 1;
	optional uint32 To = 2;
	optional double Weight = 3;
	optional double DendriteDelay = 4;
	optional TStochasticConst Stochastic = 5;
    optional TDifferenceOfGaussiansConst DifferenceOfGaussians = 6;
}