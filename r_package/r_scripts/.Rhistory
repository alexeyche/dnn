s = ip[si]
s
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
x_start = xt[i:(i+L-1)]
x = x_start
#     x_p = gbd(sprintf("x%d.pb", i-1))
#     cat("all(x-x_p == 0) == ", all(x-x_p == 0), "\n")
#
s_v = NULL
si_v = NULL
plotl(x)
for(j in 1:50) {
ip = c(x %*% t(fi))
si = which(ip == max(ip))
s = ip[si]
res = x - s * fi[si,]
#cat("s: ", s, ", si: ", si, ", |res|: ", sqrt(sum(res^2)), "\n")
if(s>=s_thr) {
#cat("Spike!")
spikes[[length(spikes)+1]] = list(t=i,si=si,s=s)
}
x = res
s_v = c(s_v, s)
si_v = c(si_v, si)
}
plotl(s_v)
s
s_v
j=1
s_v = NULL
si_v = NULL
fi
gr_pl(fi)
s
s_v
for(j in 1:50) {
ip = c(x %*% t(fi))
si = which(ip == max(ip))
s = ip[si]
res = x - s * fi[si,]
#cat("s: ", s, ", si: ", si, ", |res|: ", sqrt(sum(res^2)), "\n")
if(s>=s_thr) {
#cat("Spike!")
spikes[[length(spikes)+1]] = list(t=i,si=si,s=s)
}
x = res
s_v = c(s_v, s)
si_v = c(si_v, si)
}
s_v
s_v = NULL
si_v = NULL
x_start = xt[i:(i+L-1)]
x = x_start
for(j in 1:50) {
ip = c(x %*% t(fi))
si = which(ip == max(ip))
s = ip[si]
res = x - s * fi[si,]
#cat("s: ", s, ", si: ", si, ", |res|: ", sqrt(sum(res^2)), "\n")
if(s>=s_thr) {
#cat("Spike!")
spikes[[length(spikes)+1]] = list(t=i,si=si,s=s)
}
x = res
s_v = c(s_v, s)
si_v = c(si_v, si)
}
s_v
fi_dump = fi
fi = t(sapply(1:M, function(i) norm(fi[i,])))
gr_pl(fi)
gr_pl(fi_dump)
x_start = xt[i:(i+L-1)]
x = x_start
#     x_p = gbd(sprintf("x%d.pb", i-1))
#     cat("all(x-x_p == 0) == ", all(x-x_p == 0), "\n")
#
s_v = NULL
si_v = NULL
for(j in 1:50) {
ip = c(x %*% t(fi))
si = which(ip == max(ip))
s = ip[si]
res = x - s * fi[si,]
#cat("s: ", s, ", si: ", si, ", |res|: ", sqrt(sum(res^2)), "\n")
if(s>=s_thr) {
#cat("Spike!")
spikes[[length(spikes)+1]] = list(t=i,si=si,s=s)
}
x = res
s_v = c(s_v, s)
si_v = c(si_v, si)
}
plotl(s_v)
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
gr_m
grad_m
gr_pl(grad_m)
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
gr_pl(fi)
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
plotl(x_d)
lines(x_start,col="red")
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
out
mpl$restore(out)
out
sapply(out, function(l) l$s)
out
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
mpl
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
out
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
mpl$restore(out)
plotl(mpl$restore(out))
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
gr_pl(mpl$getFilter()
gr_pl(mpl$getFilter())
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
plotl(x_start)
lines(x_d, col="red")
out
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
delta
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
delta
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
delta
delta^2
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
?stop
geterrmessage()
traceback()
ep
i
gr_pl(grad_p)
gr_pl(grad_m)
gr_pl(grad_m)
gr_pl(grad_p)
plotl(x_dp)
plotl(x_d)
plotl(x_start)
plotl(x_d)
plotl(s_vp)
plotl(s_v)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
traceback()
plotl(delta)
plotl(delta_p)
gr_pl(grad_p - grad_m)
s_i=1
s = s_v[s_i]
s
si = si_v[s_i]
si
si
1*s*delta
plotl(delta)
plotl(delta_p)
s_v
ep
i
si_vp = gbd(sprintf("%s_winners_id%d.pb", ep, i-1))
si_vp
si_vp - si_v
sum(si_vp - si_v+1)
s_v
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
traceback()
si_vp
si_vp - si_v
si_vp - si_v+1
plotl(si_v)
plotl(s_v)
plotl(s_vp)
plotl(s_vp-s_v)
s_vp = gbd(sprintf("%s_s%d.pb", ep, i-1))
plotl(s_vp-s_v)
plotl(s_v)
si_vp
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
traceback()
source('~/cpp/r_package/r_scripts/efficient_audio_encoding.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
time
time()
?time
ts
ts()
system.time
system.time()
date()
?date()
Sys.time
Sys.time()
Sys.Date()
?Sys.time()
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
mpl$restore(out)
plotl(mpl$restore(out))
inp = v[["values"]][[1]][1:1000]
lines(inp, col="red")
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
plotl(mpl$restore(out))
plotl(mpl$restore(out))[1:100]
plotl(mpl$restore(out)[1:100])
lines(inp[1:100],col="red")
x_d = mpl$restore(inp)
x = inp[1:200]
plot(x, ylim=c(min(x_d,x), max(x,x_d)), type="l")
lines(x_d,col="red")
x_d = mpl$restore(out)
x = inp[1:200]
plot(x, ylim=c(min(x_d,x), max(x,x_d)), type="l")
lines(x_d,col="red")
x_d = mpl$restore(out)[1:200]
x = inp[1:200]
plot(x, ylim=c(min(x_d,x), max(x,x_d)), type="l")
lines(x_d,col="red")
x_d = mpl$restore(out)[1:200]
x = inp[1:200]
plot(x, ylim=c(min(x_d,x), max(x,x_d)), type="l")
lines(x_d,col="red")
x = c()
y = c()
cex = c()
for(sp in spikes) {
x = c(x, sp$t)
y=c(y, sp$si)
cex = c(cex, sp$s)
}
xyplot(y ~ x, list(x = x, y = y), cex=cex*10,  col = "black")
x
y
spikes
spikes = mpl$run(inp)
x = c()
y = c()
cex = c()
for(sp in spikes) {
x = c(x, sp$t)
y=c(y, sp$si)
cex = c(cex, sp$s)
}
xyplot(y ~ x, list(x = x, y = y), cex=cex*10,  col = "black")
xs
x
y
sp
x = c()
y = c()
cex = c()
for(sp in spikes) {
x = c(x, sp$t)
y=c(y, sp$fi)
cex = c(cex, sp$s)
}
xyplot(y ~ x, list(x = x, y = y), cex=cex*10,  col = "black")
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/mpl.R', echo=TRUE)
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1
)
mpl = RMatchingPursuit$new(conf)
gr_pl(mpl$getFilter())
mpl = RMatchingPursuit$new(conf)
gr_pl(mpl$getFilter())
mpl = RMatchingPursuit$new(conf)
gr_pl(mpl$getFilter())
mpl = RMatchingPursuit$new(conf)
gr_pl(mpl$getFilter())
ff=mpl$getFilter()
mpl = RMatchingPursuit$new(conf)
ff2=mpl$getFilter()
ff - ff2
mpl
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1
)
mpl = RMatchingPursuit$new(conf)
mpl
ff2=mpl$getFilter()
mpl = RMatchingPursuit$new(conf)
ff=mpl$getFilter()
ff2-ff
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1
)
mpl = RMatchingPursuit$new(conf)
mpl$getFilter()
RMatchingPursuit$new(conf)$getFilter()
RMatchingPursuit$new(conf)$getFilter()
RMatchingPursuit$new(conf)$getFilter()
RMatchingPursuit$new(conf)$getFilter()
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1,
learn=FALSE
)
mpl = RMatchingPursuit$new(conf)
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1,
learn=FALSE
)
mpl = RMatchingPursuit$new(conf)
inp = v[["values"]][[1]][1:1000]
spikes = mpl$run(inp)
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1,
learn=FALS
)
mpl = RMatchingPursuit$new(conf)
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1,
learn=FALSE
)
mpl = RMatchingPursuit$new(conf)
inp = v[["values"]][[1]][1:1000]
spikes = mpl$run(inp)
spikes
x = c()
y = c()
cex = c()
for(sp in spikes) {
x = c(x, sp$t)
y=c(y, sp$fi)
cex = c(cex, sp$s)
}
xyplot(y ~ x, list(x = x, y = y), cex=cex*10,  col = "black")
require(Rdnn)
prast = function(spikes,T0=0, Tmax=Inf) {
x = c()
y = c()
cex = c()
for(sp in spikes) {
if((sp$t<T0)||(sp$t)>Tmax) next
x = c(x, sp$t)
y=c(y, sp$fi)
cex = c(cex, sp$s)
}
xyplot(y ~ x, list(x = x, y = y), xlim=c(T0, max(x)), cex=cex*10,  col = "black")
}
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=32,
batch_size=350000,
jobs=4,
learn_iterations=100,
learning_rate=0.005,
seed=1,
threshold=0.05,
learn=TRUE,
noise_sd=0.0
)
norm = function(x) {
x/sqrt(sum(x^2))
}
err = function(r, x) {
sum((r-x[1:length(r)])^2)
}
mpl = RMatchingPursuit$new(conf)
set.seed(1)
f=matrix(norm(rnorm(32*100)), nrow=32, ncol=100)
mpl$setFilter(f)
max_ep = 101
start_f = mpl$getFilter()
inp = v[["values"]][[1]] #[1:10000]
ret = mpl$run(inp)
ret[[1]]
sp = ret[["spikes"]]
sp[[1]]
prast = function(spikes,T0=0, Tmax=Inf) {
x = c()
y = c()
cex = c()
tv = spikes$t
sv = spikes$s
fiv = spikes$fi
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y=c(y, fiv[i])
cex = c(cex, sv[i])
}
xyplot(y ~ x, list(x = x, y = y), xlim=c(T0, max(x)), cex=cex*10,  col = "black")
}
prast(sp)
sp = spikes
sp = ret[["spikes"]]
spikes = sp
x = c()
y = c()
cex = c()
tv = spikes$t
sv = spikes$s
fiv = spikes$fi
tv
sv
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y=c(y, fiv[i])
cex = c(cex, sv[i])
}
x
x
tv
tv[i]
length(tv)
x = c()
y = c()
cex = c()
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y = c(y, fiv[i])
cex = c(cex, sv[i])
}
x
y
cex
(tv[i])
Tmax=Inf
T0=0
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y = c(y, fiv[i])
cex = c(cex, sv[i])
}
x
y
require(Rdnn)
source("env.R")
source('~/dnn/r_scripts/get_test_data.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/gen_test_rate_patterns.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/gen_test_rate_patterns.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/gen_test_rate_patterns.R', echo=TRUE)
prast(lsl$spikes_list,T0=0,Tmax=20000)
rates
str(rates)
plot(rates)
el_of_classes
length(spikes_set)
source('~/prog/dnn/r_package/r_scripts/gen_test_rate_patterns.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/gen_test_rate_patterns.R', echo=TRUE)
