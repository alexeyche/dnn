cat("Spikes pic filename: ", spikes_pic, "\n")
pic_files = c(pic_files, spikes_pic)
}
} else {
warning(sprintf("Not found %s", SPIKES_FNAME))
}
if (file.exists(MODEL_FNAME)) {
model = RProto$new(MODEL_FNAME)$read()
w = matrix(0, nrow=length(model), ncol=length(model))
for(n in model) {
w[n$id+1, n$synapses$ids_pre+1] = n$synapses$weights
}
weights_pic = sprintf("%s/2_%s", tmp_d, pfx_f("weights.png"))
if(SAVE_PIC_IN_FILES) png(weights_pic, width=1024, height=768)
print(gr_pl(w))
if(SAVE_PIC_IN_FILES) {
dev.off()
cat("Weights pic filename: ", weights_pic, "\n")
pic_files = c(pic_files, weights_pic)
}
if(!is.null(LAYER_MAP)) {
spl = as.numeric(strsplit(LAYER_MAP, ":")[[1]])
maps = getWeightMaps(spl[2]+1,spl[3]+1, w, lsize)
weight_map_pic = sprintf("%s/4_%s", tmp_d, pfx_f("weight_map.png"))
if(SAVE_PIC_IN_FILES) png(weight_map_pic, width=1024, height=768)
print(gr_pl(maps[[spl[1]+1]]))
if(SAVE_PIC_IN_FILES) {
dev.off()
pic_files = c(pic_files, weight_map_pic)
cat("Weight map pic filename: ", weight_map_pic, "\n")
}
}
} else {
warning(sprintf("Not found %s", MODEL_FNAME))
}
if (file.exists(STAT_FNAME)) {
stat = RProto$new(STAT_FNAME)$rawRead()
stat_pic = sprintf("%s/3_%s", tmp_d, pfx_f("stat.png"))
if(SAVE_PIC_IN_FILES) png(stat_pic, width=1024, height=768*6)
if(length(stat)>=STAT_ID) {
plot_stat(stat[[STAT_ID]], STAT_SYN_ID, T0, T1)
} else {
warning("STAT_ID is out of bounds")
}
if(SAVE_PIC_IN_FILES) {
dev.off()
cat("Stat pic filename: ", stat_pic, "\n")
pic_files = c(pic_files, stat_pic)
}
} else {
warning(sprintf("Not found %s", STAT_FNAME))
}
if ( (!is.null(input))&&(!is.null(model))&&(!is.null(net)) ) {
PATTERN_LAYER = c(1)
patterns = list()
last_pattern_time = 0
for(lt_i in 1:length(input$ts_info$labels_timeline)) {
lt = input$ts_info$labels_timeline[lt_i]
li = input$ts_info$labels_ids[lt_i]
lab = input$ts_info$unique_labels[li+1]
patterns[[lt_i]] = list()
patterns[[lt_i]]$values = blank_net(length(net))
patterns[[lt_i]]$label_id = li
for(ni in 1:length(net$values)) {
sp = net$values[[ni]]
for(sp_t in sp) {
if((sp_t<last_pattern_time)||(sp_t>lt)) next
patterns[[lt_i]]$values[[ni]] = c(patterns[[lt_i]]$values[[ni]], sp_t-last_pattern_time)
}
}
last_pattern_time = lt
}
bin_patterns = list()
last_pattern_time = 0
for(lt_i in 1:length(input$ts_info$labels_timeline)) {
lt = input$ts_info$labels_timeline[lt_i]
li = input$ts_info$labels_ids[lt_i]
bin_patterns[[lt_i]] = list()
bin_patterns[[lt_i]]$label_id = li
dur = lt-last_pattern_time
bin_patterns[[lt_i]]$pattern = matrix(0, ncol=dur,nrow=length(patterns[[lt_i]]$values))
for(ni in 1:length(patterns[[lt_i]]$values)) {
bin_patterns[[lt_i]]$pattern[ni, patterns[[lt_i]]$values[[ni]] ] = 1
}
last_pattern_time = lt
}
lab_pattern = list()
map_patterns = list()
for(p in patterns) {
layers_maps = list()
for(ni in 1:length(model)) {
n = model[[ni]]
if(n$localId == 0) layers_maps[[length(layers_maps)+1]] = matrix(0, nrow=n$colSize, ncol=n$colSize)
layers_maps[[length(layers_maps)]][n$xi+1, n$yi+1] = length(p$values[[n$id+1]])
}
map_patterns[[length(map_patterns)+1]] = list(map=layers_maps[[PATTERN_LAYER+1]], label=p$label)
if( (p$label_id+1) > length(lab_pattern) ) {
lab_pattern[[p$label_id+1]] = layers_maps[[PATTERN_LAYER+1]]
} else {
lab_pattern[[p$label_id+1]] = (lab_pattern[[p$label_id+1]] + layers_maps[[PATTERN_LAYER+1]])/2
}
}
lab_errors = matrix(0, nrow=length(map_patterns), ncol=length(lab_pattern))
for(pi in 1:length(map_patterns)) {
p = map_patterns[[pi]]
for(lpi in 1:length(lab_pattern)) {
lp = lab_pattern[[lpi]]
lab_errors[pi, lpi] = sum( (p$map - lp)^2 )
}
}
#     lab_errors_pic = sprintf("%s/5_%s", tmp_d, pfx_f("lab_errors.png"))
#     if(SAVE_PIC_IN_FILES) png(lab_errors_pic, width=1024, height=768)
#     print(gr_pl(lab_errors))
#     if(SAVE_PIC_IN_FILES) {
#         dev.off()
#         cat("Lab errors pic filename: ", lab_errors_pic, "\n")
#         pic_files = c(pic_files, lab_errors_pic)
#     }
}
if(COPY_PICS) {
new_pic_files = NULL
for(p in pic_files) {
dst = sprintf("%s/%s", getwd(), basename(p))
file.copy(p, dst)
new_pic_files = c(new_pic_files, dst)
}
pic_files = new_pic_files
}
if((length(pic_files)>0)&&(OPEN_PIC)) {
open_pic(pic_files[1])
}
#
# f_template = "%s_stat.pb"
# epochs = 1:20
# stname = "Stdp_w_50"
# stat_acc = NULL
# STAT_ID = 1
#
# for(ep in epochs) {
#     s = RProto$new(sprintf(f_template, ep))$rawRead()
#     stat_acc = c(stat_acc, s[[STAT_ID]][[stname]])
# }
# plotl(stat_acc)
#
stname
sub("_$","", stname)
source('~/prog/dnn/r_package/Rdnn/R/plot_stat.R', echo=TRUE)
source('~/prog/dnn/r_package/Rdnn/R/plot_stat.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
stat[[1]][["TripleStdp_y_long"]]
plotl(stat[[1]][["TripleStdp_y_long"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
stat[[1]][["TripleStdp_ltd"]]
stat[[1]][["TripleStdp_ltd_1"]]
plotl(stat[[1]][["TripleStdp_ltd_1"]])
plotl(stat[[1]][["TripleStdp_ltd_2"]])
plotl(stat[[1]][["TripleStdp_ltd_3"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
stat[[1]][["Sliding_ltp_p_mean"]]
stat[[1]][["Sliding_ltd_p_mean"]]
names(stat[[1]])
stat[[1]][["SlidingLtd_p_mean"]]
plotl(stat[[1]][["SlidingLtd_p_mean"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(stat[[1]][["SlidingLtd_p_mean"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(stat[[1]][["SlidingLtd_p_mean"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(stat[[1]][["SlidingLtd_p_mean"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(stat[[1]][["SlidingLtd_p_mean"]])
plotl(stat[[1]][["SlidingLtd_p_mean_3"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(stat[[1]][["SlidingLtd_p_mean_3"]])
plotl(stat[[1]][["SlidingLtd_p_mean"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(stat[[1]][["SlidingLtd_p_mean"]])
plotl(stat[[1]][["SlidingLtd_p_mean_3"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(stat[[1]][["TripleStdp_ltd"]])
plotl(stat[[1]][["TripleStdp_ltd_1"]])
plotl(10*stat[[1]][["TripleStdp_ltd_1"]])
plotl(15*stat[[1]][["TripleStdp_ltd_1"]])
plotl(20*stat[[1]][["TripleStdp_ltd_1"]])
plotl(25*stat[[1]][["TripleStdp_ltd_1"]])
plotl(35*stat[[1]][["TripleStdp_ltd_1"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(stat[[1]][["TripleStdp_ltd_1"]])
plotl(stat[[1]][["TripleStdp_ltd_2"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(stat[[1]][["TripleStdp_ltd_2"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
plotl(35*stat[[1]][["TripleStdp_ltd_1"]])
plotl(stat[[1]][["TripleStdp_ltd_1"]])
plotl(stat[[1]][["TripleStdp_ltd_1"]]*stat[[1]][["TripleStdp_ltd_1"]])
plotl(stat[[1]][["TripleStdp_ltd_1"]]*stat[[1]][["TripleStdp_ltd_1"]]*stat[[1]][["TripleStdp_ltd_1"]])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
pspikes
net
sapply(net, length)
sapply(net, length)/50000
sapply(net, length)/50
3
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
sapply(net, length)/50
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
require(Rdnn)
require(rjson)
setwd(path.expand("~/dnn/r_scripts"))
source("ucr_ts.R")
source("env.R")
cr = fromJSON(readConst(CONST_JSON))
cr
cjson = toJSON(cr)
cjson
const = RConstants$new(cjson)
s = RSim$new(const)
s
source("./ucr_data_to_spikes.R")
spikes = spikes_complect[["train"]]$values
spikes = sapply(spikes_complect[["train"]]$values, function(x) x[x<10000])
s$setInputSpikes(spikes, "SpikeSequenceNeuron")
spikes
prast(spikes)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
ucr_data_to_spikes(50, 500, 5)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
ucr_data_to_spikes(50, 500, 5)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
sp = ucr_data_to_spikes(50, 500, 5)
names(sp)
sp[["train"]]
prast(sp[["train"]])
prast(sp[["train"]]$spikes_list)
prast(sp[["train"]]$spikes_list,T0=0,Tmax=1000)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
cr
cr$sim_configuration
cr$sim_configuration$layers[[1]]
cr$sim_configuration$layers[[1]]$size
sp = ucr_data_to_spikes(50, 500, 1)
prast(sp[[1]]$values,T0=0,Tmax=1000)
sp = ucr_data_to_spikes(50, 500, 5)
prast(sp[[1]]$values,T0=0,Tmax=1000)
prast(sp[[1]]$values,T0=0,Tmax=10000)
sp = ucr_data_to_spikes(50, 500, 1)
prast(sp[[1]]$values,T0=0,Tmax=10000)
sp[[1]]$timeline
sp = ucr_data_to_spikes(50, 500, 5)
sp[[1]]$timeline
source('~/dnn/r_scripts/sim.R', echo=TRUE)
prast(net)
net
prast(net$values,T0=0,Tmax=10000)
w
gr_pl(w)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
prast(net$values,T0=0,Tmax=100000)
len = 10000
t = seq(1,len)/1000
Iin = 0.0 +0.8*cos(2*pi*3.5*t + 0.8)
plot(Iin)
Iin
plot(Iin[1:100])
len = 10000
t = seq(1,len)/1000
Iin = 0.0 +0.8*cos(2*pi*3.5*t + 0.8)
t
len = 10000
t = seq(1,len)/1000
Iin = 0.0 +0.8*cos(2*pi*3.5*t + 0.8)
t
pi
pi
Iin = 0.0 +0.8*cos(2*3.14*3.5*t + 0.8)
Iin
plotl(Iin[1:100])
plotl(Iin[1:1000])
source('~/prog/dnn/r_package/r_scripts/insp.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
rpoiss
rpois(10)
?rpois
rpois(1000, 0.1)
rpois(1000, 0.01)
rpois(1000, 0.001)
rpois(1000, 10*0.001)
plot(rpois(1000, 10*0.001))
plot(rpois(1000, 100*0.001))
plot(rpois(1000, 1000*0.001))
plot(rpois(1000, 0.001))
plot(rpois(1000, 1/1000))
plot(rpois(1000, 1/1000))
plot(rpois(1000, 10/1000))
plot(rpois(1000, 100/1000))
plot(rpois(10000, 100/1000))
source('~/prog/dnn/r_package/r_scripts/gen_poisson.R', echo=TRUE)
gen_poisson(100)
prast(gen_poisson(100))
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
N = cr$sim_configuration$layers[[1]]$size
rate=10
spikes = list(values=gen_poisson(N, rate))
spikes$values
s$setInputSpikes(spikes, "SpikeSequenceNeuron")
N = cr$sim_configuration$layers[[1]]$size
rate=10
spikes = list(values=gen_poisson(N, rate))
prast(spikes$values)
prast(spikes$values,T0=0,Tmax=1000)
sapply(spikes$values,length)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
gr_pl(t(m[["w"]]))
source('~/dnn/r_scripts/sim.R', echo=TRUE)
cr
cr$sim_configuration$layers
cr$sim_configuration$layers[[2]]
cr$sim_configuration$layers[[2]][[5]] <- NULL
cr$sim_configuration$layers[[2]]
cr = fromJSON(readConst(CONST_JSON))
which(names(cr$sim_configuration$layers) == "learning_rule")
names(cr$sim_configuration$layers)
names(cr$sim_configuration$layers[[2]])
which(names(cr$sim_configuration$layers[[2]]) == "learning_rule")
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
cr$sim_configuration$layers[[1]]$size
source('~/dnn/r_scripts/sim.R', echo=TRUE)
const
stat
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
const
source('~/dnn/r_scripts/sim.R', echo=TRUE)
const
s
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
stat
plot_stat(stat)
names(stat)
stat[[1]]
names(stat[[1]])
plot_stat(stat[[1]])
source('~/dnn/r_scripts/sim.R', echo=TRUE)
prast(spikes)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
plot_stat
plot_stat(stat[[1]], 10)
cr
source('~/dnn/r_scripts/sim.R', echo=TRUE)
plot_stat(stat[[1]], 1)
plot_stat(stat[[2]], 1)
prast(net$values,T0=0,Tmax=10000)
prast(net$values,T0=0,Tmax=1000)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
plot_stat(stat[[1]], 1)
cr$sim_configuration
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
gen_poisson
set.seed(1)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
net
net$values[51:100]
str(net$values)
net$values[51:99]
sapply(net$values[51:99], length)/len
1000*sapply(net$values[51:99], length)/len
source('~/.active-rstudio-document', echo=TRUE)
mean(1000*sapply(net$values[51:99], length)/len)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim.R', echo=TRUE)
rate
prast(spikes)
spikes
s$run(1)
net = s$getSpikes()
prast(spikes)
1000*sapply(net$values[51:99], length)/len
source('~/dnn/r_scripts/sim.R', echo=TRUE)
out_rates
plot(out_rates)
plot(rates, out_rates)
prast(net)
net
prast(net$values)
1000*sapply(net$values[51:99], length
1000*sapply(net$values[51:99], length)
1000*sapply(net$values[51:99], length)
mean(1000*sapply(net$values[51:99], length)/len)
prast(net$values,T0=0,Tmax=1000)
out_rates
source('~/dnn/r_scripts/sim.R', echo=TRUE)
plot(rates, out_rates)
