weight = c(1, 3, 3, 2, 2, 4, 0, 4, 3, 0, 1, 1)
dfx = data.frame(CPA=cpa_group, LCV=revenue_per_customer_group, freq=weight)
# reshape data frame so 1 row for each event
# (prediate step to create contingency table)
dfx2 = data.frame( lapply(dfx, function(x){rep(x, dfx$freq)}))
t = xtabs(~ LCV + CPA, dfx)
sin(0.1*seq(0,1000))
plot(sin(0.1*seq(0,1000)))
ts = list(values=sin(0.1*seq(0,1000)))
RProto$new("/home/alexeyche/dnn/ts/test.pb")$write(ts, "TimeSeries")
require(Rdnn)
RProto$new("/home/alexeyche/dnn/ts/test.pb")$write(ts, "TimeSeries")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f_ts
f
plot(f)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
ff_ts
plot(ff_ts)
plot(ff_ts[1:100\])
plot(ff_ts[1:100])
plot(f_ts[1:100])
source('~/.active-rstudio-document', echo=TRUE)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts_true)
plot(ff_ts)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_true)
plot(Re(f_ts_true))
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f_ts
plot(f_ts)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts)
plot(f_ts_true)
plot(Im(ff_ts_true))
plot(Re(ff_ts_true))
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f_ts_false
plot(f_ts_false)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_false)
plot(f_ts_true)
plot(ff_ts_true)
plot(Re(ff_ts_true))
plot(Re(ff_ts))
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
require(Rdnn)
ts = list(values=sin(0.1*seq(0,1000)))
f="/home/alexeyche/dnn/ts/test.pb"
RProto$new(f)$write(ts, "TimeSeries")
ff="/home/alexeyche/dnn/build/test_fft.pb"
f_inv="/home/alexeyche/dnn/build/test_inv.pb"
f_ts_false = RProto$new(f_inv)$read()$values[[1]]
f_ts_false = RProto$new(f_inv)$read()$values[[1]]
f_ts_false
plot(f_ts_false)
plotl(ts)
plot(ts)
plot(ts[[1]])
require(Rdnn)
tf = seq(0, 1, length.out=100)
tf = seq(0, 1, length.out=100)
exp(-tf/100)
tf = seq(0, 100, length.out=100)
exp(-tf/10)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f
plotl(f)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(f)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(f)
source('~/dnn/r_scripts/gen_poisson.R', echo=TRUE)
sp = gen_poisson(1, binary=TRUE)
sp[[1]]
sp = gen_poisson(1, binary=TRUE)
sp
sp[1,]
plot(sp[1,])
fft(f)
sp = gen_poisson(1, binary=TRUE)[1,]
fft(f) * fft(s)
fft(f) * fft(sp)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
conv
plot(conv[1:100])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100])
plot(conv[1:100],type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
conv
plot(conv[1:100])
plot(conv[1:100],type="k")
plot(conv[1:100],type="l")
length(fft(f))
length(fft(sp))
f = exp(-tf/20)
sp = gen_poisson(1, binary=TRUE)[1,]
f = c(f, rep(0, length(sp)-length(f)))
length(f)
f_m_sp = (fft(f)/length(f)) * (fft(sp)/length(sp))
conv = Re(fft(f_m_sp, inverse=TRUE))
conv
plot(conv[1:100])
plot(conv[1:100], type="l")
plot(sp[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
lines(sp[1:100])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(Re(fft(sp)))
plot(Re(fft(sp))[1:100])
plot(Re(fft(sp))[1:10])
file="/home/alexeyche/dnn/build/test.pb"
RProto$new(file)$write(list(values=sp), "TimeSeries")
file="/home/alexeyche/dnn/build/filter.pb"
RProto$new(file)$write(list(values=f), "TimeSeries")
file="/home/alexeyche/dnn/build/out.pb"
out = RProto$new(file)$read()
require(Rdnn)
file="/home/alexeyche/dnn/build/test.pb"
RProto$new(file)$write(list(values=sp), "TimeSeries")
file="/home/alexeyche/dnn/build/filter.pb"
RProto$new(file)$write(list(values=f), "TimeSeries")
file="/home/alexeyche/dnn/build/out.pb"
out = RProto$new(file)$read()
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/gen_poisson.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
out
length(out$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
length(out$values[[1]])
out$values[[1]][10000:10100]
plot(out$values[[1]][10000:10100])
epsp2 <- Vectorize(function(s) {
if((s<0)||(s == Inf)) { return(0) }
e0*(exp(-s/tm)-exp(-s/ts))
})
epsp2
tm=100
ts=10
epsp2(seq(0,100))
e0=1
epsp2(seq(0,100))
plot(epsp2(seq(0,100)))
tm=10; ts=100; plot(epsp2(seq(0,100)))
tm=100; ts=10; plot(epsp2(seq(0,100)))
tm=10; ts=100; plot(epsp2(seq(0,100)))
tm=10; ts=10; plot(epsp2(seq(0,100)))
tm=100; ts=10; plot(epsp2(seq(0,100)))
tm=100; ts=10; plot(epsp2(seq(0,1000)))
tm=20; ts=10; plot(epsp2(seq(0,1000)))
tm=20; ts=10; plot(epsp2(seq(0,100)))
tm=1000; ts=10; plot(epsp2(seq(0,100)))
tm=10; ts=10; plot(epsp2(seq(0,100)))
tm=11; ts=10; plot(epsp2(seq(0,100)))
file="/home/alexeyche/dnn/build/kernel.pb"
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
kernel
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
plotl(kernel$values[[1]][1:100])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]][1:100])
source('~/dnn/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
source('~/dnn/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
sp_c = ucr_data_to_spikes(100, 1000, 1, 0)
sp_c = ucr_data_to_spikes(100, 100, 1, 0)
source('~/dnn/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
sp_c = ucr_data_to_spikes(100, 100, 1, 0)
sp_c = ucr_data_to_spikes(100, 1000, 1, 0)
source('~/prog/dnn/r_package/r_scripts/interpolate_ucr_data.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
sp_c = ucr_data_to_spikes(100, 1000, 1, 0)
str(sp_c)
labels[[1]]
sp_c[[1]]
sp_c[[1]]$timeline
length(sp_c[[1]]$timeline)
length(sp_c[[1]]$values)
str(sp_c[[1]]$values)
sp_c[[1]]$values[[1]]
sp_c[[1]]$values[[2]]
sp_c[[1]]$values
c(sp_c, d_c) = ucr_data_to_spikes(100, 1000, 1, 0)
c(sp_c, d_c) := ucr_data_to_spikes(100, 1000, 1, 0)
save_spikes_complect(sp_c, d_c)
spikes_complect = sp_c
data_complec = d_c
dst_dir = SPIKES_PLACE
ts_dst_dir= TS_PLACE
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
sp_c = ucr_data_to_spikes(100, 1000, 1, 0)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
sp_c = ucr_data_to_spikes(100, 1000, 1, 0)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
sp_c = ucr_data_to_spikes(100, 1000, 1, 0)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
sp_c = ucr_data_to_spikes(100, 1000, 1, 0)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
N=100; sample_size=1000
dt =1
gap_between_patterns=0
sel = c(1:10, 51:60, 101:110, 151:160)
data_name = synth
ts_dst_dir= TS_PLACE
ts_dir = pj(DATASETS_PLACE, "ucr")
c(data_train, data_test) := read_ts_file(data_name, sample_size, ts_dir)
min_train = min(sapply(data_train, function(x) min(x$data)))
min_test = min(sapply(data_test, function(x) min(x$data)))
min_val = min(min_train, min_test)
max_train = max(sapply(data_train, function(x) max(x$data)))
max_test = max(sapply(data_test, function(x) max(x$data)))
max_val = max(max_train, max_test)
intercept = seq(min_val, max_val, length.out=N)
data_complect = list(train=data_train, test=data_test)
spikes_complect = list()
for(data_part in names(data_complect)) {
ts = data_complect[[data_part]]
sp = list(timeline = NULL, labels = NULL, dt=dt, gap_between_patterns=gap_between_patterns)
sp$values = lapply(1:N, function(i) x <- vector(mode="numeric", length=0))
labels = NULL
time = 0
for(i in sel) {
for(x in ts[[i]]$data) {
d = abs(x - intercept)
ni = which(d == min(d))
sp$values[[ni]] = c(sp$values[[ni]], time)
time = time + dt
}
time = time + gap_between_patterns
sp$labels_timeline = c(sp$labels_timeline, time)
labels = c(labels, as.character(ts[[i]]$label))
}
sp$unique_labels = unique(labels)
}
sp$unique_labels
sp$labels_ids = sapply(sp$labels, function(l) which(l == sp$unique_labels)) - 1
sp$labels_ids = sapply(labels, function(l) which(l == sp$unique_labels)) - 1
sp$labels_ids
labels
sp$unique_labels
sapply(labels, function(l) which(l == sp$unique_labels)) - 1
sapply(labels, function(l) which(l == sp$unique_labels))
labels
length(labels)
length(sapply(labels, function(l) which(l == sp$unique_labels)))
v =sapply(labels, function(l) which(l == sp$unique_labels))
v
str(v)
l="4"
which(l == sp$unique_labels)
labels
l="1"
which(l == sp$unique_labels)
sp$unique_labels
lapply(1:length(sp$unique_labels), function(i) i)
?lapply
vapply(1:length(sp$unique_labels), function(i) i)
l_ids = list()
idx = 0
for(l in sp$unique_labels) {
l_ids[[l]] = idx
idx = idx + 1
}
l_ids
sp$labels_ids = sapply(labels, function(l) l_idx[[l]])
sapply(labels, function(l) l_ids[[l]])
labels
sapply(labels, function(l) l_ids[[l]])[1\]
sapply(labels, function(l) l_ids[[l]])[1]
c(sapply(labels, function(l) l_ids[[l]]))
as.numeric(sapply(labels, function(l) l_ids[[l]]))
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
for(data_part in names(data_complect)) {
ts = data_complect[[data_part]]
sp = list(timeline = NULL, labels = NULL, dt=dt, gap_between_patterns=gap_between_patterns)
sp$values = lapply(1:N, function(i) x <- vector(mode="numeric", length=0))
labels = NULL
time = 0
for(i in sel) {
for(x in ts[[i]]$data) {
d = abs(x - intercept)
ni = which(d == min(d))
sp$values[[ni]] = c(sp$values[[ni]], time)
time = time + dt
}
time = time + gap_between_patterns
sp$labels_timeline = c(sp$labels_timeline, time)
labels = c(labels, as.character(ts[[i]]$label))
}
sp$unique_labels = unique(labels)
l_ids = list()
idx = 0
for(l in sp$unique_labels) {
l_ids[[l]] = idx
idx = idx + 1
}
sp$labels_ids = as.numeric(sapply(labels, function(l) l_ids[[l]]))
spikes_complect[[data_part]] = sp
dir.create(ts_dst_dir, FALSE, TRUE)
fname = sprintf("%s/%s_%s_len_%s_classes_%s.pb", ts_dst_dir, data_name, length(sel), length(sp$unique_labels), data_part)
RProto$new(fname)$write(sp, "TimeSeries")
}
names(sp)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
ts = data_complect[[data_part]]
sp = list(labels_timeline = NULL, unique_labels = NULL)
sp$values = lapply(1:N, function(i) x <- vector(mode="numeric", length=0))
labels = NULL
time = 0
for(i in sel) {
for(x in ts[[i]]$data) {
d = abs(x - intercept)
ni = which(d == min(d))
sp$values[[ni]] = c(sp$values[[ni]], time)
time = time + dt
}
time = time + gap_between_patterns
sp$labels_timeline = c(sp$labels_timeline, time)
labels = c(labels, as.character(ts[[i]]$label))
}
sp$unique_labels = unique(labels)
l_ids = list()
idx = 0
for(l in sp$unique_labels) {
l_ids[[l]] = idx
idx = idx + 1
}
sp$labels_ids = as.numeric(sapply(labels, function(l) l_ids[[l]]))
spikes_complect[[data_part]] = sp
dir.create(ts_dst_dir, FALSE, TRUE)
fname = sprintf("%s/%s_%s_len_%s_classes_%s.pb", ts_dst_dir, data_name, length(sel), length(sp$unique_labels), data_part)
RProto$new(fname)$write(sp, "TimeSeries")
names(sp)
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
ts = data_complect[[data_part]]
sp = list(ts_info=list(labels_timeline = NULL, unique_labels = NULL))
sp$values = lapply(1:N, function(i) x <- vector(mode="numeric", length=0))
labels = NULL
time = 0
for(i in sel) {
for(x in ts[[i]]$data) {
d = abs(x - intercept)
ni = which(d == min(d))
sp$values[[ni]] = c(sp$values[[ni]], time)
time = time + dt
}
time = time + gap_between_patterns
sp$ts_info$labels_timeline = c(sp$ts_info$labels_timeline, time)
labels = c(labels, as.character(ts[[i]]$label))
}
sp$ts_info$unique_labels = unique(labels)
l_ids = list()
idx = 0
for(l in sp$unique_labels) {
l_ids[[l]] = idx
idx = idx + 1
}
sp$labels_ids = as.numeric(sapply(labels, function(l) l_ids[[l]]))
spikes_complect[[data_part]] = sp
dir.create(ts_dst_dir, FALSE, TRUE)
fname = sprintf("%s/%s_%s_len_%s_classes_%s.pb", ts_dst_dir, data_name, length(sel), length(sp$ts_info$unique_labels), data_part)
RProto$new(fname)$write(sp, "TimeSeries")
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
ts = data_complect[[data_part]]
sp = list(ts_info=list(labels_timeline = NULL, unique_labels = NULL))
sp$values = lapply(1:N, function(i) x <- vector(mode="numeric", length=0))
labels = NULL
time = 0
for(i in sel) {
for(x in ts[[i]]$data) {
d = abs(x - intercept)
ni = which(d == min(d))
sp$values[[ni]] = c(sp$values[[ni]], time)
time = time + dt
}
time = time + gap_between_patterns
sp$ts_info$labels_timeline = c(sp$ts_info$labels_timeline, time)
labels = c(labels, as.character(ts[[i]]$label))
}
sp$ts_info$unique_labels = unique(labels)
l_ids = list()
idx = 0
for(l in sp$sp$ts_info$unique_labels) {
l_ids[[l]] = idx
idx = idx + 1
}
sp$labels_ids = as.numeric(sapply(labels, function(l) l_ids[[l]]))
spikes_complect[[data_part]] = sp
dir.create(ts_dst_dir, FALSE, TRUE)
fname = sprintf("%s/%s_%s_len_%s_classes_%s.pb", ts_dst_dir, data_name, length(sel), length(sp$ts_info$unique_labels), data_part)
RProto$new(fname)$write(sp, "TimeSeries")
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
sp$ts_info$labels_ids = as.numeric(sapply(labels, function(l) l_ids[[l]]))
l_ids = list()
idx = 0
for(l in sp$sp$ts_info$unique_labels) {
l_ids[[l]] = idx
idx = idx + 1
}
l_ids
l_ids = list()
idx = 0
for(l in sp$ts_info$unique_labels) {
l_ids[[l]] = idx
idx = idx + 1
}
sp$ts_info$labels_ids = as.numeric(sapply(labels, function(l) l_ids[[l]]))
spikes_complect[[data_part]] = sp
dir.create(ts_dst_dir, FALSE, TRUE)
fname = sprintf("%s/%s_%s_len_%s_classes_%s.pb", ts_dst_dir, data_name, length(sel), length(sp$ts_info$unique_labels), data_part)
RProto$new(fname)$write(sp, "TimeSeries")
names(sp)
sp$ts_info
ts
length(ts)
sapply(ts, function(x) x$data)
c(sapply(ts, function(x) x$data))
length(c(sapply(ts, function(x) x$data)))
length(c(sapply(ts[sel], function(x) x$data)))
source('~/prog/dnn/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
ts_dst_dir= TS_PLACE
ts_dir = pj(DATASETS_PLACE, "ucr")
dir.create(ts_dst_dir, FALSE, TRUE)
dir.create(dst_dir, FALSE, TRUE)
c(data_train, data_test) := read_ts_file(data_name, sample_size, ts_dir)
min_train = min(sapply(data_train, function(x) min(x$data)))
min_test = min(sapply(data_test, function(x) min(x$data)))
min_val = min(min_train, min_test)
max_train = max(sapply(data_train, function(x) max(x$data)))
max_test = max(sapply(data_test, function(x) max(x$data)))
max_val = max(max_train, max_test)
intercept = seq(min_val, max_val, length.out=N)
data_complect = list(train=data_train, test=data_test)
spikes_complect = list()
for(data_part in names(data_complect)) {
ts = data_complect[[data_part]]
sp = list(ts_info=list(labels_timeline = NULL, unique_labels = NULL))
sp$values = lapply(1:N, function(i) x <- vector(mode="numeric", length=0))
labels = NULL
time = 0
for(i in sel) {
for(x in ts[[i]]$data) {
d = abs(x - intercept)
ni = which(d == min(d))
sp$values[[ni]] = c(sp$values[[ni]], time)
time = time + dt
}
time = time + gap_between_patterns
sp$ts_info$labels_timeline = c(sp$ts_info$labels_timeline, time)
labels = c(labels, as.character(ts[[i]]$label))
}
sp$ts_info$unique_labels = unique(labels)
l_ids = list()
idx = 0
for(l in sp$ts_info$unique_labels) {
l_ids[[l]] = idx
idx = idx + 1
}
sp$ts_info$labels_ids = as.numeric(sapply(labels, function(l) l_ids[[l]]))
spikes_complect[[data_part]] = sp
fname = sprintf("%s/%s_%s_len_%s_classes_%s.pb", dst_dir, data_name, length(sel), length(sp$ts_info$unique_labels), data_part)
RProto$new(fname)$write(sp, "SpikesList")
fname = sprintf("%s/%s_%s_len_%s_classes_%s.pb", ts_dst_dir, data_name, length(sel), length(sp$ts_info$unique_labels), data_part)
RProto$new(fname)$write(list(values=c(sapply(ts[sel], function(x) x$data)), ts_info=sp$ts_info), "TimeSeries")
}
