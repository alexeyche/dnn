set.seed(1)
f=matrix(norm(rnorm(32*100)), nrow=32, ncol=100)
mpl$setFilter(f)
max_ep = 101
start_f = mpl$getFilter()
inp = v[["values"]][[1]] #[1:10000]
ret = mpl$run(inp)
ret[[1]]
sp = ret[["spikes"]]
sp[[1]]
prast = function(spikes,T0=0, Tmax=Inf) {
x = c()
y = c()
cex = c()
tv = spikes$t
sv = spikes$s
fiv = spikes$fi
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y=c(y, fiv[i])
cex = c(cex, sv[i])
}
xyplot(y ~ x, list(x = x, y = y), xlim=c(T0, max(x)), cex=cex*10,  col = "black")
}
prast(sp)
sp = spikes
sp = ret[["spikes"]]
spikes = sp
x = c()
y = c()
cex = c()
tv = spikes$t
sv = spikes$s
fiv = spikes$fi
tv
sv
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y=c(y, fiv[i])
cex = c(cex, sv[i])
}
x
x
tv
tv[i]
length(tv)
x = c()
y = c()
cex = c()
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y = c(y, fiv[i])
cex = c(cex, sv[i])
}
x
y
cex
(tv[i])
Tmax=Inf
T0=0
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y = c(y, fiv[i])
cex = c(cex, sv[i])
}
x
y
install.packages("RankAggreg,")
install.packages("RankAggreg")
require(RankAggr)
require(RankAggreg)
?RankAggreg
install.packages("bioDist")
source('~/prog/factors_thresh/rank_dist.R', echo=TRUE)
# number of concordant pairs
P = function(t) {
r_ndx = row(t)
c_ndx = col(t)
sum(t * mapply(function(r, c){sum(t[(r_ndx > r) & (c_ndx > c)])},
r = r_ndx, c = c_ndx))}
# number of discordant pairs
Q = function(t) {
r_ndx = row(t)
c_ndx = col(t)
sum(t * mapply( function(r, c){
sum(t[(r_ndx > r) & (c_ndx < c)])
},
r = r_ndx, c = c_ndx) )
}
# # sample size (total number of pairs)
# n = n = sum(t)
#
# # the lesser of number of rows or columns
# m = min(dim(t))
kendall_tau_c = function(t){
t = as.matrix(t)
m = min(dim(t))
n = sum(t)
ks_tauc = (m*2 * (P(t)-Q(t))) / ((n^2)*(m-1))
}
cpa_group = c(4, 2, 4, 3, 2, 2, 3, 2, 1, 5, 5, 1)
revenue_per_customer_group = c(3, 3, 1, 3, 4, 4, 4, 3, 5, 3, 2, 2)
weight = c(1, 3, 3, 2, 2, 4, 0, 4, 3, 0, 1, 1)
dfx = data.frame(CPA=cpa_group, LCV=revenue_per_customer_group, freq=weight)
# reshape data frame so 1 row for each event
# (prediate step to create contingency table)
dfx2 = data.frame( lapply(dfx, function(x){rep(x, dfx$freq)}))
dfx
dfx2
t = xtabs(~ revenue + cpa, dfx)
dfx2
t = xtabs(~ LCV + CPA, dfx)
t
dfx2
t
kc
kc = kendall_tau_c(t)
kc
dfx2
t = xtabs(~ LCV + CPA, dfx2)
tg
t
dfx
t
?xtabs
t = xtabs(~ LCV + CPA, dfx)
t
cpa_group = c(4, 2, 4, 3, 2, 2, 3, 2, 1, 5, 5, 1)
revenue_per_customer_group = c(3, 3, 3, 4, 4, 4, 3, 5, 3, 2, 2)
weight = c(1, 3, 3, 2, 2, 4, 0, 4, 3, 0, 1, 1)
dfx = data.frame(CPA=cpa_group, LCV=revenue_per_customer_group, freq=weight)
# reshape data frame so 1 row for each event
# (prediate step to create contingency table)
dfx2 = data.frame( lapply(dfx, function(x){rep(x, dfx$freq)}))
t = xtabs(~ LCV + CPA, dfx)
sin(0.1*seq(0,1000))
plot(sin(0.1*seq(0,1000)))
ts = list(values=sin(0.1*seq(0,1000)))
RProto$new("/home/alexeyche/dnn/ts/test.pb")$write(ts, "TimeSeries")
require(Rdnn)
RProto$new("/home/alexeyche/dnn/ts/test.pb")$write(ts, "TimeSeries")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f_ts
f
plot(f)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
ff_ts
plot(ff_ts)
plot(ff_ts[1:100\])
plot(ff_ts[1:100])
plot(f_ts[1:100])
source('~/.active-rstudio-document', echo=TRUE)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts_true)
plot(ff_ts)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_true)
plot(Re(f_ts_true))
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f_ts
plot(f_ts)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts)
plot(f_ts_true)
plot(Im(ff_ts_true))
plot(Re(ff_ts_true))
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f_ts_false
plot(f_ts_false)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_false)
plot(f_ts_true)
plot(ff_ts_true)
plot(Re(ff_ts_true))
plot(Re(ff_ts))
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
require(Rdnn)
ts = list(values=sin(0.1*seq(0,1000)))
f="/home/alexeyche/dnn/ts/test.pb"
RProto$new(f)$write(ts, "TimeSeries")
ff="/home/alexeyche/dnn/build/test_fft.pb"
f_inv="/home/alexeyche/dnn/build/test_inv.pb"
f_ts_false = RProto$new(f_inv)$read()$values[[1]]
f_ts_false = RProto$new(f_inv)$read()$values[[1]]
f_ts_false
plot(f_ts_false)
plotl(ts)
plot(ts)
plot(ts[[1]])
require(Rdnn)
tf = seq(0, 1, length.out=100)
tf = seq(0, 1, length.out=100)
exp(-tf/100)
tf = seq(0, 100, length.out=100)
exp(-tf/10)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f
plotl(f)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(f)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(f)
source('~/dnn/r_scripts/gen_poisson.R', echo=TRUE)
sp = gen_poisson(1, binary=TRUE)
sp[[1]]
sp = gen_poisson(1, binary=TRUE)
sp
sp[1,]
plot(sp[1,])
fft(f)
sp = gen_poisson(1, binary=TRUE)[1,]
fft(f) * fft(s)
fft(f) * fft(sp)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
conv
plot(conv[1:100])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100])
plot(conv[1:100],type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
conv
plot(conv[1:100])
plot(conv[1:100],type="k")
plot(conv[1:100],type="l")
length(fft(f))
length(fft(sp))
f = exp(-tf/20)
sp = gen_poisson(1, binary=TRUE)[1,]
f = c(f, rep(0, length(sp)-length(f)))
length(f)
f_m_sp = (fft(f)/length(f)) * (fft(sp)/length(sp))
conv = Re(fft(f_m_sp, inverse=TRUE))
conv
plot(conv[1:100])
plot(conv[1:100], type="l")
plot(sp[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
lines(sp[1:100])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(Re(fft(sp)))
plot(Re(fft(sp))[1:100])
plot(Re(fft(sp))[1:10])
file="/home/alexeyche/dnn/build/test.pb"
RProto$new(file)$write(list(values=sp), "TimeSeries")
file="/home/alexeyche/dnn/build/filter.pb"
RProto$new(file)$write(list(values=f), "TimeSeries")
file="/home/alexeyche/dnn/build/out.pb"
out = RProto$new(file)$read()
require(Rdnn)
file="/home/alexeyche/dnn/build/test.pb"
RProto$new(file)$write(list(values=sp), "TimeSeries")
file="/home/alexeyche/dnn/build/filter.pb"
RProto$new(file)$write(list(values=f), "TimeSeries")
file="/home/alexeyche/dnn/build/out.pb"
out = RProto$new(file)$read()
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/gen_poisson.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
out
length(out$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
length(out$values[[1]])
out$values[[1]][10000:10100]
plot(out$values[[1]][10000:10100])
epsp2 <- Vectorize(function(s) {
if((s<0)||(s == Inf)) { return(0) }
e0*(exp(-s/tm)-exp(-s/ts))
})
epsp2
tm=100
ts=10
epsp2(seq(0,100))
e0=1
epsp2(seq(0,100))
plot(epsp2(seq(0,100)))
tm=10; ts=100; plot(epsp2(seq(0,100)))
tm=100; ts=10; plot(epsp2(seq(0,100)))
tm=10; ts=100; plot(epsp2(seq(0,100)))
tm=10; ts=10; plot(epsp2(seq(0,100)))
tm=100; ts=10; plot(epsp2(seq(0,100)))
tm=100; ts=10; plot(epsp2(seq(0,1000)))
tm=20; ts=10; plot(epsp2(seq(0,1000)))
tm=20; ts=10; plot(epsp2(seq(0,100)))
tm=1000; ts=10; plot(epsp2(seq(0,100)))
tm=10; ts=10; plot(epsp2(seq(0,100)))
tm=11; ts=10; plot(epsp2(seq(0,100)))
file="/home/alexeyche/dnn/build/kernel.pb"
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
kernel
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
plotl(kernel$values[[1]][1:100])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]][1:100])
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()
require(Rdnn)
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()
plotl(kernel$values[[1]][1:100])
v$values[[1]]
fft(v$values[[1]])
Sys.time
Sys.time()
for(val in v$values) {
vf = fft(v$values[[1]])
Sys.time()
}
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()
for(val in v$values) {
vf = fft(v$values[[1]])
cat(Sys.time(), "\n")
}
sapply(v, length)
sapply(v$values, length)
source('~/tmp/test_stuff.R', echo=TRUE)
source('~/tmp/test_stuff.R', echo=TRUE)
str(ts)
ts[1:1000]
ts[[1]][1:1000]
plot(ts[[1]][1:1000])
m = RProto$new("/home/alexeyche/dnn/build/matrix_1_0.pb")$read()[[1]]
m
gr_pl(m)
(0.0235845*0.0235845)
sqrt((0.0235845*0.0235845))
0.139/sqrt((0.0235845*0.0235845))
require(Rdnn)
env
Sys.getenv
Sys.getenv("LD_LIBRARY_PATH")
require(Rdnn)
sessionInfo()
environment
environment()
source('~/prog/dnn/r_package/r_scripts/test_shapelets.R', echo=TRUE)
v
v * vr
mean(v * vr)
x*y
v*vr
sum(v*vr)
v*vr
mean(v*vr)
mean(v*v)
mean(v*vr4)
cand = RProto$new("/home/alexeyche/dnn/build/candidate")$read()$values[[1]]
require(Rdnn)
cand = RProto$new("/home/alexeyche/dnn/build/candidate")$read()$values[[1]]
cand = RProto$new("/home/alexeyche/dnn/build/candidate.pb")$read()$values[[1]]
cand
require(Rdnn)
#cand = RProto$new("/home/alexeyche/dnn/build/left.pb")$read()$values[[1]]
#L = length(cand)
#vr1 = RProto$new("/home/alexeyche/dnn/build/right0_68.pb")$read()$values[[1]]
#ts = RProto$new("/home/alexeyche/dnn/ts/synthetic_control_norm_40_len_4_classes_train.pb")$read()$values[[1]]
#ts = RProto$new("/home/alexeyche/dnn/ts/synthetic_control_norm_6_len_2_classes_train.pb")$read()$values[[1]]
#cand = RProto$new("/home/alexeyche/dnn/build/best.pb")$read()$values[[1]]
cand = RProto$new("/home/alexeyche/dnn/build/candidate.pb")$read()$values[[1]]
sub0 = RProto$new("/home/alexeyche/dnn/build/subseq0.pb")$read()$values[[1]]
sub1 = RProto$new("/home/alexeyche/dnn/build/subseq1.pb")$read()$values[[1]]
source('~/prog/dnn/r_package/r_scripts/test_shapelets.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/test_shapelets.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/test_shapelets.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/test_shapelets.R', echo=TRUE)
plotl9dd
plotl(dd)
plotl(dd[1:1000])
plotl(dd2[1:1000])
dist(cand, sub0)
dist(cand, sub1)
L
sub0
length(sub0)
length(cand)
dist(cand, sub1)
sub2 = RProto$new("/home/alexeyche/dnn/build/subseq2.pb")$read()$values[[1]]
dist(cand, sub2)
i=10
r = ts[i:(i+L-1)]
c(d, d2) := dist(cand, r)
dd
d
d2
plotl(dd[1:1000])
plotl(dd2[1:1000])
plotl(dd2[1:1000] - dd[1:1000])
plotl(dd[1:1000] - dd2[1:1000])
left_hist = list(3=4, 2=10, 1=10, 0=7)
list
list(5=10)
list("5"=10)
left_hist/sum(left_hist)
source('~/.active-rstudio-document', echo=TRUE)
rat = left_hist/sum(left_hist)
rat * log(rat)
sum(rat * log(rat))
?sum
diff(rat)
source('~/prog/dnn/r_package/r_scripts/test_gain.R', echo=TRUE)
calc_ent(left_hist)
calc_ent(right_hist)
h = right_hist
rat = h/sum(h)
arr = rat*log(rat)
arr
source('~/prog/dnn/r_package/r_scripts/test_gain.R', echo=TRUE)
calc_ent(right_hist)
calc_ent(left_hist)
source('~/prog/dnn/r_package/r_scripts/test_gain.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/test_gain.R', echo=TRUE)
1.38629 - 31*1.33017/40 - 9*0.636514/40
source('~/prog/dnn/r_package/r_scripts/test_gain.R', echo=TRUE)
left_hist
sum(left_hist)
calc_ent(left_hist)
left_hist = c(7, 10, 10, 4)
calc_ent(left_hist)
calc_ent(right_hist)
right_hist = c(3, 0, 0, 6)
calc_ent(right_hist)
sum(left_hist)
sum(left_hist)/N
30/N
source('~/prog/dnn/r_package/r_scripts/test_gain.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/test_gain.R', echo=TRUE)
) # suppose to be good
#left_hist = c(6, 10, 10, 4)
left_hist = c(6, 0, 5, 5)
#right_hist = c(3, 0, 0, 6)
#right_hist = c(4, 0, 0, 6)
right_hist = c(4, 10, 5, 5)
N = sum(left_hist) + sum(right_hist)
N
de = 1.38629
calc_ent = function(h) {
rat = h/sum(h)
arr = rat*log(rat)
E = 0
for(v in arr) {
if(is.nan(v)) next
E = E - v
}
return(E)
}
de - sum(left_hist)*calc_ent(left_hist)/N - sum(right_hist)*calc_ent(right_hist)/N
source('~/prog/dnn/r_package/r_scripts/test_gain.R', echo=TRUE)
source('~/prog/dnn/r_package/r_scripts/test_gain.R', echo=TRUE)
require(kernlab)
??kernlab
source('~/dnn/r_scripts/sim_api/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim_api/sim.R', echo=TRUE)
prast(ne)
prast(net)
m = s$getModel()
m
gr_pl(m)
str(m)
gr_pl(m$w)
const
source('~/dnn/r_scripts/sim_api/sim.R', echo=TRUE)
prast(net)
source('~/dnn/r_scripts/sim_api/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim_api/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim_api/sim.R', echo=TRUE)
source('~/dnn/r_scripts/sim_api/sim.R', echo=TRUE)
