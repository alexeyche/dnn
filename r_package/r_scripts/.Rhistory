mpl = RMatchingPursuit$new(conf)
ff=mpl$getFilter()
ff2-ff
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1
)
mpl = RMatchingPursuit$new(conf)
mpl$getFilter()
RMatchingPursuit$new(conf)$getFilter()
RMatchingPursuit$new(conf)$getFilter()
RMatchingPursuit$new(conf)$getFilter()
RMatchingPursuit$new(conf)$getFilter()
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1,
learn=FALSE
)
mpl = RMatchingPursuit$new(conf)
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1,
learn=FALSE
)
mpl = RMatchingPursuit$new(conf)
inp = v[["values"]][[1]][1:1000]
spikes = mpl$run(inp)
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1,
learn=FALS
)
mpl = RMatchingPursuit$new(conf)
require(Rdnn)
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=64,
batch_size=1000,
jobs=1,
learn_iterations=50,
learning_rate=0.05,
seed=1,
learn=FALSE
)
mpl = RMatchingPursuit$new(conf)
inp = v[["values"]][[1]][1:1000]
spikes = mpl$run(inp)
spikes
x = c()
y = c()
cex = c()
for(sp in spikes) {
x = c(x, sp$t)
y=c(y, sp$fi)
cex = c(cex, sp$s)
}
xyplot(y ~ x, list(x = x, y = y), cex=cex*10,  col = "black")
require(Rdnn)
prast = function(spikes,T0=0, Tmax=Inf) {
x = c()
y = c()
cex = c()
for(sp in spikes) {
if((sp$t<T0)||(sp$t)>Tmax) next
x = c(x, sp$t)
y=c(y, sp$fi)
cex = c(cex, sp$s)
}
xyplot(y ~ x, list(x = x, y = y), xlim=c(T0, max(x)), cex=cex*10,  col = "black")
}
v = RProto$new("/home/alexeyche/dnn/ts/riken_14chan_3LRR.pb")$read()
conf = list(
filters_num=32,
batch_size=350000,
jobs=4,
learn_iterations=100,
learning_rate=0.005,
seed=1,
threshold=0.05,
learn=TRUE,
noise_sd=0.0
)
norm = function(x) {
x/sqrt(sum(x^2))
}
err = function(r, x) {
sum((r-x[1:length(r)])^2)
}
mpl = RMatchingPursuit$new(conf)
set.seed(1)
f=matrix(norm(rnorm(32*100)), nrow=32, ncol=100)
mpl$setFilter(f)
max_ep = 101
start_f = mpl$getFilter()
inp = v[["values"]][[1]] #[1:10000]
ret = mpl$run(inp)
ret[[1]]
sp = ret[["spikes"]]
sp[[1]]
prast = function(spikes,T0=0, Tmax=Inf) {
x = c()
y = c()
cex = c()
tv = spikes$t
sv = spikes$s
fiv = spikes$fi
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y=c(y, fiv[i])
cex = c(cex, sv[i])
}
xyplot(y ~ x, list(x = x, y = y), xlim=c(T0, max(x)), cex=cex*10,  col = "black")
}
prast(sp)
sp = spikes
sp = ret[["spikes"]]
spikes = sp
x = c()
y = c()
cex = c()
tv = spikes$t
sv = spikes$s
fiv = spikes$fi
tv
sv
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y=c(y, fiv[i])
cex = c(cex, sv[i])
}
x
x
tv
tv[i]
length(tv)
x = c()
y = c()
cex = c()
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y = c(y, fiv[i])
cex = c(cex, sv[i])
}
x
y
cex
(tv[i])
Tmax=Inf
T0=0
for(i in 1:length(tv)) {
if((tv[i])||(tv[i])>Tmax) next
x = c(x, tv[i])
y = c(y, fiv[i])
cex = c(cex, sv[i])
}
x
y
install.packages("RankAggreg,")
install.packages("RankAggreg")
require(RankAggr)
require(RankAggreg)
?RankAggreg
install.packages("bioDist")
source('~/prog/factors_thresh/rank_dist.R', echo=TRUE)
# number of concordant pairs
P = function(t) {
r_ndx = row(t)
c_ndx = col(t)
sum(t * mapply(function(r, c){sum(t[(r_ndx > r) & (c_ndx > c)])},
r = r_ndx, c = c_ndx))}
# number of discordant pairs
Q = function(t) {
r_ndx = row(t)
c_ndx = col(t)
sum(t * mapply( function(r, c){
sum(t[(r_ndx > r) & (c_ndx < c)])
},
r = r_ndx, c = c_ndx) )
}
# # sample size (total number of pairs)
# n = n = sum(t)
#
# # the lesser of number of rows or columns
# m = min(dim(t))
kendall_tau_c = function(t){
t = as.matrix(t)
m = min(dim(t))
n = sum(t)
ks_tauc = (m*2 * (P(t)-Q(t))) / ((n^2)*(m-1))
}
cpa_group = c(4, 2, 4, 3, 2, 2, 3, 2, 1, 5, 5, 1)
revenue_per_customer_group = c(3, 3, 1, 3, 4, 4, 4, 3, 5, 3, 2, 2)
weight = c(1, 3, 3, 2, 2, 4, 0, 4, 3, 0, 1, 1)
dfx = data.frame(CPA=cpa_group, LCV=revenue_per_customer_group, freq=weight)
# reshape data frame so 1 row for each event
# (prediate step to create contingency table)
dfx2 = data.frame( lapply(dfx, function(x){rep(x, dfx$freq)}))
dfx
dfx2
t = xtabs(~ revenue + cpa, dfx)
dfx2
t = xtabs(~ LCV + CPA, dfx)
t
dfx2
t
kc
kc = kendall_tau_c(t)
kc
dfx2
t = xtabs(~ LCV + CPA, dfx2)
tg
t
dfx
t
?xtabs
t = xtabs(~ LCV + CPA, dfx)
t
cpa_group = c(4, 2, 4, 3, 2, 2, 3, 2, 1, 5, 5, 1)
revenue_per_customer_group = c(3, 3, 3, 4, 4, 4, 3, 5, 3, 2, 2)
weight = c(1, 3, 3, 2, 2, 4, 0, 4, 3, 0, 1, 1)
dfx = data.frame(CPA=cpa_group, LCV=revenue_per_customer_group, freq=weight)
# reshape data frame so 1 row for each event
# (prediate step to create contingency table)
dfx2 = data.frame( lapply(dfx, function(x){rep(x, dfx$freq)}))
t = xtabs(~ LCV + CPA, dfx)
sin(0.1*seq(0,1000))
plot(sin(0.1*seq(0,1000)))
ts = list(values=sin(0.1*seq(0,1000)))
RProto$new("/home/alexeyche/dnn/ts/test.pb")$write(ts, "TimeSeries")
require(Rdnn)
RProto$new("/home/alexeyche/dnn/ts/test.pb")$write(ts, "TimeSeries")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f_ts
f
plot(f)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
ff_ts
plot(ff_ts)
plot(ff_ts[1:100\])
plot(ff_ts[1:100])
plot(f_ts[1:100])
source('~/.active-rstudio-document', echo=TRUE)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts_true)
plot(ff_ts)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(ff_ts)
plot(ff_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_true)
plot(Re(f_ts_true))
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f_ts
plot(f_ts)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts)
plot(f_ts_true)
plot(Im(ff_ts_true))
plot(Re(ff_ts_true))
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f_ts_false
plot(f_ts_false)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_false)
plot(f_ts_true)
plot(ff_ts_true)
plot(Re(ff_ts_true))
plot(Re(ff_ts))
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(f_ts_true)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
require(Rdnn)
ts = list(values=sin(0.1*seq(0,1000)))
f="/home/alexeyche/dnn/ts/test.pb"
RProto$new(f)$write(ts, "TimeSeries")
ff="/home/alexeyche/dnn/build/test_fft.pb"
f_inv="/home/alexeyche/dnn/build/test_inv.pb"
f_ts_false = RProto$new(f_inv)$read()$values[[1]]
f_ts_false = RProto$new(f_inv)$read()$values[[1]]
f_ts_false
plot(f_ts_false)
plotl(ts)
plot(ts)
plot(ts[[1]])
require(Rdnn)
tf = seq(0, 1, length.out=100)
tf = seq(0, 1, length.out=100)
exp(-tf/100)
tf = seq(0, 100, length.out=100)
exp(-tf/10)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
f
plotl(f)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(f)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(f)
source('~/dnn/r_scripts/gen_poisson.R', echo=TRUE)
sp = gen_poisson(1, binary=TRUE)
sp[[1]]
sp = gen_poisson(1, binary=TRUE)
sp
sp[1,]
plot(sp[1,])
fft(f)
sp = gen_poisson(1, binary=TRUE)[1,]
fft(f) * fft(s)
fft(f) * fft(sp)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
conv
plot(conv[1:100])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100])
plot(conv[1:100],type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
conv
plot(conv[1:100])
plot(conv[1:100],type="k")
plot(conv[1:100],type="l")
length(fft(f))
length(fft(sp))
f = exp(-tf/20)
sp = gen_poisson(1, binary=TRUE)[1,]
f = c(f, rep(0, length(sp)-length(f)))
length(f)
f_m_sp = (fft(f)/length(f)) * (fft(sp)/length(sp))
conv = Re(fft(f_m_sp, inverse=TRUE))
conv
plot(conv[1:100])
plot(conv[1:100], type="l")
plot(sp[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(conv[1:100], type="l")
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
lines(sp[1:100])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plot(Re(fft(sp)))
plot(Re(fft(sp))[1:100])
plot(Re(fft(sp))[1:10])
file="/home/alexeyche/dnn/build/test.pb"
RProto$new(file)$write(list(values=sp), "TimeSeries")
file="/home/alexeyche/dnn/build/filter.pb"
RProto$new(file)$write(list(values=f), "TimeSeries")
file="/home/alexeyche/dnn/build/out.pb"
out = RProto$new(file)$read()
require(Rdnn)
file="/home/alexeyche/dnn/build/test.pb"
RProto$new(file)$write(list(values=sp), "TimeSeries")
file="/home/alexeyche/dnn/build/filter.pb"
RProto$new(file)$write(list(values=f), "TimeSeries")
file="/home/alexeyche/dnn/build/out.pb"
out = RProto$new(file)$read()
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
source('~/dnn/r_scripts/gen_poisson.R', echo=TRUE)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
out
length(out$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
length(out$values[[1]])
out$values[[1]][10000:10100]
plot(out$values[[1]][10000:10100])
epsp2 <- Vectorize(function(s) {
if((s<0)||(s == Inf)) { return(0) }
e0*(exp(-s/tm)-exp(-s/ts))
})
epsp2
tm=100
ts=10
epsp2(seq(0,100))
e0=1
epsp2(seq(0,100))
plot(epsp2(seq(0,100)))
tm=10; ts=100; plot(epsp2(seq(0,100)))
tm=100; ts=10; plot(epsp2(seq(0,100)))
tm=10; ts=100; plot(epsp2(seq(0,100)))
tm=10; ts=10; plot(epsp2(seq(0,100)))
tm=100; ts=10; plot(epsp2(seq(0,100)))
tm=100; ts=10; plot(epsp2(seq(0,1000)))
tm=20; ts=10; plot(epsp2(seq(0,1000)))
tm=20; ts=10; plot(epsp2(seq(0,100)))
tm=1000; ts=10; plot(epsp2(seq(0,100)))
tm=10; ts=10; plot(epsp2(seq(0,100)))
tm=11; ts=10; plot(epsp2(seq(0,100)))
file="/home/alexeyche/dnn/build/kernel.pb"
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
kernel
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]])
plotl(kernel$values[[1]][1:100])
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
plotl(kernel$values[[1]][1:100])
source('~/dnn/r_scripts/get_test_data.R', echo=TRUE)
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()$values
v
sapply(v, length)
sapply(v, c)
m = sapply(v, c)
m
gr_pl(m)
source('~/dnn/r_scripts/get_test_data.R', echo=TRUE)
source('~/dnn/r_scripts/get_test_data.R', echo=TRUE)
source('~/dnn/r_scripts/get_test_data.R', echo=TRUE)
source('~/dnn/r_scripts/get_test_data.R', echo=TRUE)
source('~/dnn/r_scripts/get_test_data.R', echo=TRUE)
source('~/dnn/r_scripts/get_test_data.R', echo=TRUE)
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()$values
sapply(v, c)
gr_pl(sapply(v, c))
mm = sapply(v, c)
dim(mm)
mm[1200:1491, ]
gr_pl(mm[1200:1491, ])
gr_pl(mm[1000:1491, ])
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()$values
sp = sapply(v, c)
dim(sp)
gr_pl(sp[1:100, ])
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()$values
v
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()
v$values = list(v$values[[1]])
file2="/home/alexeyche/dnn/build/out2.pb"
RProto$new(file2)$write(v, "TimeSeries")
str9v
str(v)
source('~/dnn/r_scripts/test_fft.R', echo=TRUE)
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()
v$values = list(v$values[[1]])
file2="/home/alexeyche/dnn/build/out2.pb"
RProto$new(file2)$write(v, "TimeSeries")
str(v)
file="/home/alexeyche/dnn/build/out.pb"
v = RProto$new(file)$read()
v$values = list(v$values[[1]])
v$ts_info$labels_ids = as.integer(v$ts_info$labels_ids)
v$ts_info$labels_timeline = as.integer(v$ts_info$labels_timeline)
file2="/home/alexeyche/dnn/build/out2.pb"
RProto$new(file2)$write(v, "TimeSeries")
str(v)
v$ts_info$labels_ids
v = RProto$new(file)$read()
v$values = list(v$values[[1]])
v$ts_info = NULL
file2="/home/alexeyche/dnn/build/out2.pb"
RProto$new(file2)$write(v, "TimeSeries")
